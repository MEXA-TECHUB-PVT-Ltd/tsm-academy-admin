{"version":3,"file":"static/js/779.d5198e74.chunk.js","mappings":"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","sources":["pages/reviewAdd/SamplePage.js"],"sourcesContent":["// material-ui\nimport {\n  Typography, Grid, Button, Box,\n  FormHelperText,\n  InputLabel,\n  OutlinedInput,\n  Avatar,\n  Stack,\n  Tooltip,\n\n} from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport {\n  PaperClipOutlined,\n  UploadOutlined,\n  ArrowLeftOutlined\n} from '@ant-design/icons';\nimport { ClipLoader } from \"react-spinners\";\nimport toastAlert from 'components/ToastAlert/index';\nimport { useNavigate } from 'react-router-dom';\nimport { get, post, postFormData } from 'Urls/api';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Rating from '@mui/material/Rating';\n\nconst ReviewAdd = () => {\n  //  Select Image \n  const fileInputRef = useRef(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ImageFile, setImageFile] = useState(null);\n\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImageFile(file)\n\n      const reader = new FileReader();\n      reader.onload = () => {\n        setSelectedImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleButtonClick = () => {\n    fileInputRef.current.click();\n  };\n  const navigate = useNavigate();\n  const [value, setValue] = useState(0);\n  const [selectedProgram, setSelectedProgram] = useState('')\n  const fetchAllprograms = async () => {\n    try {\n\n      const apiData = await get('program/get'); // Specify the endpoint you want to call\n      console.log(\"ALL PROGRAMS\")\n\n      console.log(apiData)\n\n      if (apiData.error) {\n      } else {\n        setSelectedProgram(apiData.result[0].program_id)\n      }\n    } catch (error) {\n\n    }\n  }\n\n  useEffect(() => {\n    fetchAllprograms()\n  }, []);\n  return (\n    <>\n      <Grid container spacing={2}>\n\n\n        <Grid item xs={12} md={12} style={{ position: 'relative' }}>\n\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={12} style={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'left',\n              marginBottom: '2%'\n            }}>\n              <Tooltip title=\"Back\">\n\n\n                <Button\n                  onClick={() => {\n                    navigate(`/reviews`)\n                  }\n                  }\n                  className='poppinsRegularBold'\n                  sx={{\n                    // width: '100px',\n                    paddingInline: '10px',\n                    display: \"block\",\n                    color: \"#03356b\",\n                    backgroundColor: \"none\",\n                    fontSize: '16px',\n                    fontWeight: 600,\n                    borderRadius: '50px',\n                    textTransform: 'capitalize',\n                    transition: 'background-color 0.3s, color 0.3s', // Add transition properties\n                    transitionDelay: '0.3s', // Add transition delay for hover\n                    marginRight: '10px',\n                    // border: '1px solid #03356b',\n                    '&:hover': {\n                      backgroundColor: \"#03356b\",\n                      color: 'white', // Change text color to blue on hover\n                    },\n                  }} >\n                  <ArrowLeftOutlined />\n                </Button>\n              </Tooltip>\n              <Typography variant=\"h3\" style={{ fontWeight: 700, }}>Add Review</Typography>\n            </Grid>\n            <Grid item xs={12} md={12} >\n              {/* <OrdersTable /> */}\n              <Formik\n                initialValues={{\n                  name: '',\n                  review: '',\n                  submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                  name: Yup.string().required('Name is required'),\n                  review: Yup.string().required('Review is required'),\n\n\n                })}\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting, resetForm, }) => {\n                  try {\n                    console.log(values)\n                    console.log(ImageFile)\n                    let ImageUrl;\n                    if (ImageFile === null || ImageFile === \"\") {\n                      toastAlert(\"error\", \"User Image is required\")\n\n                    } else {\n                      const img = new Image();\n                      img.src = URL.createObjectURL(ImageFile);\n                      img.onload = async () => {\n                        if (img.width > 500 || img.height > 500) {\n                          toastAlert(\"error\", \"Image dimensions should be 500x500px or less.\");\n                        } else {\n                          const postDataImage = {\n                            image: ImageFile\n                          };\n                          ImageUrl = await postFormData(postDataImage); // Specify the endpoint you want to call\n                          console.log(ImageUrl)\n                          setSubmitting(true);\n                          const postData = {\n                            image: ImageUrl?.path,\n                            name: values.name,\n                            review: values.review,\n                            rating: value,\n                          };\n                          try {\n                            // craete product \n                            const apiData = await post('review/createReview', postData); // Specify the endpoint you want to call\n                            console.log(\"ADD Review \")\n    \n                            console.log(apiData)\n                            if (apiData.error) {\n                              console.log(\"error true\")\n                              toastAlert(\"error\", apiData.message)\n                              setSubmitting(false);\n    \n                            } else {\n    \n                              // resetForm();\n                              setTimeout(() => {\n                                // window.location.reload();\n                                toastAlert(\"success\", \"Review Added Successfully\")\n                                navigate('/reviews')\n                              }, 1000);\n    \n                              setStatus({ success: false });\n                              setSubmitting(false);\n                            }\n                          } catch (error) {\n                            toastAlert(\"error\", \"Something Went Wrong\")\n                            // setNextloader(false)\n                            setStatus({ success: false });\n                            setSubmitting(false);\n                            // console.error('Error fetching data:', error);\n                            // setNextloader(false)\n    \n                          }\n                        }\n                      }\n\n                    \n                    }\n\n                    setStatus({ success: false });\n                    setSubmitting(false);\n                  } catch (err) {\n                    setStatus({ success: false });\n                    setErrors({ submit: err.message });\n                    setSubmitting(false);\n                  }\n                }}\n              >\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, submitForm }) => (\n                  <form noValidate onSubmit={handleSubmit}>\n                    <Grid container spacing={3}>\n\n                      <Grid item xs={12} md={12} >\n                        <Grid container spacing={2} style={{ border: '1px solid lightGray', borderRadius: '10px', backgroundColor: 'white' }}>\n                          <Grid item xs={12} md={12}>\n                            <Grid container spacing={2}>\n                              <Grid item xs={12} md={6} style={{ padding: '20px' }}>\n                                <Stack spacing={1}>\n                                  <Typography variant=\"h5\">Name</Typography>\n                                  <OutlinedInput\n                                    id=\"email-login\"\n                                    type=\"text\"\n                                    value={values.name}\n                                    name=\"name\"\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    error={Boolean(touched.name && errors.name)}\n                                  />\n                                  {touched.name && errors.name && (\n                                    <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                                      {errors.name}\n                                    </FormHelperText>\n                                  )}\n                                </Stack>\n                                <Stack spacing={1}>\n                                  <Typography variant=\"h5\">Review</Typography>\n\n                                  <OutlinedInput\n                                    id=\"review\"\n                                    type=\"text\"\n                                    value={values.review}\n                                    name=\"review\"\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    multiline\n                                    rows={4}\n                                    error={Boolean(touched.review && errors.review)}\n                                  />\n                                  {touched.review && errors.review && (\n                                    <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                                      {errors.review}\n                                    </FormHelperText>\n                                  )}\n                                </Stack>\n\n                                <Stack spacing={1}>\n                                  <Typography variant=\"h5\"> Rating</Typography>\n                                  <Rating name=\"size-large\" value={value}\n                                    onChange={(event, newValue) => {\n                                      setValue(newValue);\n                                    }} size=\"large\" />\n\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                <Stack spacing={1}>\n                                  {selectedImage === '' || selectedImage === null ? <>\n                                    <Box onClick={handleButtonClick} style={{ width: '100%', marginInline: '2%', padding: '15px', backgroundColor: '#f2f0f0', border: '3px dotted #cecece', borderRadius: '10px' }}>\n                                      <Box style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', paddingBlock: '10%', flexDirection: 'column' }}>\n\n                                        <UploadOutlined style={{ fontSize: '50px', color: 'gray' }} />\n                                        <Typography variant=\"h6\">Choose an image</Typography>\n\n                                      </Box>\n                                    </Box>\n                                  </> :\n                                    <>\n                                      <Box onClick={handleButtonClick} style={{ marginInline: '2%', backgroundColor: '#f2f0f0', border: '3px dotted #cecece', borderRadius: '10px', display: 'flex', justifyContent: 'center', flexDirection: 'column' }}>\n\n                                        {selectedImage &&\n                                          <Avatar src={selectedImage} alt=\"Selected\" style={{ width: 'auto', height: '200px', border: '1px solid lightGray', borderRadius: '10px' }} variant=\"square\" />\n                                        }\n                                        <AnimateButton>\n                                          <Button onClick={() => setSelectedImage('')} disableElevation variant=\"outlined\" size=\"medium\" style={{ color: 'rgb(76 91 104)', fontWeight: 700, backgroundColor: 'white', border: '1px solid lightGray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)', marginBlock: '1%' }} color=\"secondary\">\n                                            Change Image\n                                          </Button>\n                                        </AnimateButton>\n                                      </Box>\n\n                                    </>}\n\n                                  <input\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    style={{ display: 'none' }}\n                                    id=\"fileInput\"\n                                    onChange={handleFileUpload}\n                                    ref={fileInputRef}\n                                  />\n\n\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n\n\n\n                      <Grid item xs={12} align=\"right\">\n\n                        <Button disabled={isSubmitting}\n                          startIcon={\n                            isSubmitting ?\n                              <ClipLoader\n                                color={\"#fff\"}\n                                loading={isSubmitting}\n                                size={20}\n                              />\n                              : null\n                          }\n                          type=\"submit\" disableElevation variant=\"contained\" size=\"medium\" style={{ fontWeight: 700, color: 'white', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)', marginInline: '2%' }} color=\"primary\">\n                          Save\n                        </Button>\n                        <Button\n                          disabled={isSubmitting}\n                          startIcon={\n                            isSubmitting ?\n                              <ClipLoader\n                                color={\"#fff\"}\n                                loading={isSubmitting}\n                                size={20}\n                              />\n                              : null\n                          }\n                          onClick={() => {\n                            submitForm().then(() => {\n                              //  refresh page \n                              window.location.reload();\n                              // navigate('/new-route'); // replace '/new-route' with the path you want to navigate to\n                            });\n                          }} disableElevation variant=\"contained\" size=\"medium\" style={{ fontWeight: 700, color: 'white', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"primary\">\n                          Save & Add More\n                        </Button>\n\n                      </Grid>\n                    </Grid>\n                  </form>\n                )}\n              </Formik>\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n      </Grid>\n\n    </>\n  )\n};\n\nexport default ReviewAdd;\n"],"names":["fileInputRef","useRef","_useState","useState","_useState2","_slicedToArray","selectedImage","setSelectedImage","_useState3","_useState4","ImageFile","setImageFile","handleFileUpload","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","handleButtonClick","current","click","navigate","useNavigate","_useState5","_useState6","value","setValue","_useState7","_useState8","setSelectedProgram","fetchAllprograms","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","apiData","wrap","_context","prev","next","get","sent","console","log","error","program_id","t0","stop","apply","arguments","useEffect","_jsx","_Fragment","children","Grid","container","spacing","item","xs","md","style","position","_jsxs","display","flexDirection","justifyContent","marginBottom","Tooltip","title","Button","onClick","className","sx","paddingInline","color","backgroundColor","fontSize","fontWeight","borderRadius","textTransform","transition","transitionDelay","marginRight","ArrowLeftOutlined","Typography","variant","Formik","initialValues","name","review","submit","validationSchema","Yup","shape","required","onSubmit","_ref3","_callee3","values","_ref2","setErrors","setStatus","setSubmitting","ImageUrl","img","_context3","resetForm","toastAlert","Image","src","URL","createObjectURL","_callee2","_ImageUrl","postDataImage","postData","_context2","width","height","image","postFormData","path","rating","post","message","setTimeout","success","err","_x","_x2","_ref5","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","submitForm","noValidate","border","padding","Stack","OutlinedInput","id","type","onBlur","onChange","fullWidth","Boolean","FormHelperText","multiline","rows","Rating","newValue","size","alignItems","Box","marginInline","paddingBlock","UploadOutlined","Avatar","alt","AnimateButton","disableElevation","boxShadow","marginBlock","accept","ref","align","disabled","startIcon","ClipLoader","loading","then","window","location","reload"],"sourceRoot":""}
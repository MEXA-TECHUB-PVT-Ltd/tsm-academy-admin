{"version":3,"file":"static/js/884.b6bcc645.chunk.js","mappings":"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","sources":["components/cards/statistics/AnalyticEcommerce.js","pages/users/OrdersTable.js","pages/users/SamplePage.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// material-ui\nimport { Box, Chip, Grid, Stack, Typography } from '@mui/material';\n\n// project import\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { RiseOutlined, FallOutlined } from '@ant-design/icons';\n\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\n\nconst AnalyticEcommerce = ({ color, title, count, percentage, isLoss, extra }) => (\n  <MainCard contentSX={{ p: 2.25 }}>\n    <Stack spacing={0.5}>\n      <Typography variant=\"h6\" color=\"textSecondary\">\n        {title}\n      </Typography>\n      <Grid container alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h4\" color=\"inherit\">\n            {count}\n          </Typography>\n        </Grid>\n        {percentage && (\n          <Grid item>\n            <Chip\n              variant=\"combined\"\n              color={color}\n             \n              label={`${percentage}%`}\n              sx={{ ml: 1.25, pl: 1 }}\n              size=\"small\"\n            />\n          </Grid>\n        )}\n      </Grid>\n    </Stack>\n    \n  </MainCard>\n);\n\nAnalyticEcommerce.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.number,\n  isLoss: PropTypes.bool,\n  extra: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\n};\n\nAnalyticEcommerce.defaultProps = {\n  color: 'primary'\n};\n\nexport default AnalyticEcommerce;\n","import { useEffect, useRef, useState } from 'react';\n// material-ui\nimport {\n  Box, Menu, MenuItem,\n  FormHelperText,\n  InputLabel,\n  OutlinedInput,\n  Button,\n  Skeleton,\n  IconButton,\n  TablePagination,\n  Badge,\n  Divider,\n  Tooltip, Grid, Avatar, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography\n} from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport DialogTitle from '@mui/material/DialogTitle';\n// project import\nimport emptyImage from \"../../assets/images/icons8-empty-64.png\"\nimport { BASE_URL, get, post, postFormData } from 'Urls/api';\nimport {\n  EllipsisOutlined,\n  SaveOutlined,\n  PaperClipOutlined,\n  UploadOutlined,\n  CloseOutlined,\n\n\n} from '@ant-design/icons';\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useNavigate } from 'react-router-dom';\nimport toastAlert from 'components/ToastAlert/index';\nimport { formatDate } from 'utils/formatDate';\nimport { styled } from '@mui/material/styles';\n\n\n// ==============================|| ORDER TABLE ||============================== //\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\nexport default function OrderTable() {\n  const navigate = useNavigate();\n  const [products, setProducts] = useState([]);\n  const [productsLength, setProductsLength] = useState(0);\n\n  // get all products \n\n  const anchorRef = useRef(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  // delete \n  // Del \n  const [opendel, setOpendel] = useState(false);\n\n  const handleClosedel = () => {\n    setOpendel(false);\n  };\n  // List \n\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const handleDelete = () => {\n    setAnchorEl(null)\n    setOpendel(true)\n  }\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  };\n  // Delete Product \n  const [loading, setLoading] = useState(false)\n  const DeleteProduct = async () => {\n    setLoading(true)\n    console.log(selectedIndex)\n    const postData = {\n      user_id: selectedIndex,\n      status: StatusOfUser === \"active\" ? \"inactive\" : \"active\"\n    }\n    const apiData = await post('user/updateUsername', postData); // Specify the endpoint you want to call\n    console.log(\"Update Status \")\n    console.log(apiData)\n\n    if (apiData.error) {\n      toastAlert(\"error\", apiData.message)\n      setLoading(false)\n\n    } else {\n      toastAlert(\"success\", apiData.message)\n      setOpendel(false);\n      setLoading(false)\n\n      fetchAllproducts()\n\n    }\n\n  }\n  // Pagination \n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const [loader, setLoader] = useState(true)\n\n  // Use effect \n  const fetchAllproducts = async () => {\n    try {\n      // const postData = {\n      //   rowsPerPage: rowsPerPage,\n      //   page: page\n      // }\n      const apiData = await post('user/getAllUsers'); // Specify the endpoint you want to call\n      console.log(\"ALL USERS\")\n      console.log(apiData)\n\n      if (apiData.error) {\n        setLoader(false)\n      } else {\n        setProductsLength(apiData.totalPages)\n        setProducts(apiData.result)\n        setLoader(false)\n      }\n    } catch (error) {\n      setLoader(false)\n    }\n  }\n  // Edit \n  //  Select Image \n  const [productData, setProductData] = useState(null)\n  const fileInputRef = useRef(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ImageFile, setImageFile] = useState(null);\n  const [openEdit, setOpenEdit] = useState(false)\n  const handleCloseEdit = () => {\n    setOpenEdit(false)\n  }\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImageFile(file)\n      const reader = new FileReader();\n      reader.onload = () => {\n        setSelectedImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const [StatusOfUser, setStatusOfUser] = useState('')\n  const handleButtonClick = () => {\n    fileInputRef.current.click();\n  };\n  useEffect(() => {\n    fetchAllproducts()\n  }, [page]);\n  return (\n    <Box>\n      {loader ? <>\n        <Grid container spacing={2} pt={10} >\n          {/* For variant=\"text\", adjust the height via font-size */}\n\n          <Grid item xs={12} md={12} >\n\n            <Skeleton variant=\"rectangular\" height={100} />\n\n          </Grid>\n          <Grid item xs={12} md={12} >\n\n            <Skeleton variant=\"rectangular\" height={100} />\n\n          </Grid>\n          <Grid item xs={12} md={12} >\n\n            <Skeleton variant=\"rectangular\" height={100} />\n\n          </Grid>\n\n        </Grid>\n      </> : <>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={12} align=\"right\">\n\n            <TableContainer\n              sx={{\n                width: '100%',\n                overflowX: 'auto',\n                position: 'relative',\n                display: 'block',\n                maxWidth: '100%',\n                '& td, & th': { whiteSpace: 'nowrap' }\n              }}\n            >\n              <Table\n                aria-labelledby=\"tableTitle\"\n                sx={{\n                  '& .MuiTableCell-root:first-of-type': {\n                    pl: 2\n                  },\n                  '& .MuiTableCell-root:last-of-type': {\n                    pr: 3\n                  }\n                }}\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"left\">Name</TableCell>\n\n                    <TableCell align=\"center\">Subscribed Courses</TableCell>\n                    <TableCell align=\"center\">Status</TableCell>\n\n\n                    <TableCell align=\"center\">Created</TableCell>\n                    <TableCell align=\"center\">Updated</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {products.length === 0 ? <>\n                    <TableRow>\n                      <TableCell colSpan={6} align=\"center\">\n                        <Box style={{\n                          display: 'flex',\n                          justifyContent: 'center'\n                        }}>\n                          <Avatar variant=\"square\" src={emptyImage} alt=\"No Data\" style={{ width: '64px', height: 'auto', marginBlock: '2%' }} />\n                        </Box>\n                      </TableCell>\n\n                    </TableRow>\n                  </> :\n                    <>\n                      {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                        <>\n                          <TableRow\n                            key={row?.product_id}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                          >\n                            <TableCell component=\"th\" scope=\"row\" style={{ cursor: 'pointer' }} onClick={() => navigate(`/user_detail/${row.user_id}`)}>\n                              <Grid container spacing={2}>\n                                <Grid item xs={12} md={2}>\n                                  <Avatar style={{\n                                    backgroundColor: '#03356b',\n                                    textTransform: 'capitalize'\n                                  }}\n                                  // take first letter of user name and make it capitalize \n\n                                  >{row?.user_name.charAt(0)}</Avatar>\n\n\n                                </Grid>\n                                <Grid item xs={12} md={10}>\n                                  <Typography variant=\"h5\" style={{ fontWeight: 200 }}>{row?.user_name}</Typography>\n                                  <Typography variant=\"h6\" style={{ fontWeight: 200, color: 'gray' }}>{row.email}</Typography>\n                                </Grid>\n                              </Grid>\n                            </TableCell>\n                            <TableCell align=\"center\">{row?.subscribedProducts}</TableCell>\n                            <TableCell align=\"center\">\n                              <Badge color={row?.status === 'active' ? 'success' : 'error'}\n                                badgeContent={<span style={{ textTransform: 'capitalize' }}>{row?.status}</span>} />\n                              {/* {row?.status} */}\n                            </TableCell>\n\n                            <TableCell align=\"center\">{formatDate(row?.created_at)}</TableCell>\n                            <TableCell align=\"center\">{formatDate(row.updated_at)}</TableCell>\n\n                            <TableCell align=\"center\">\n                              <Tooltip title=\"Action\">\n                                <EllipsisOutlined ref={anchorRef} style={{ fontSize: '30px', cursor: 'pointer' }} onClick={\n                                  (event) => {\n                                    setSelectedIndex(row.user_id)\n                                    setAnchorEl(event.currentTarget);\n                                    setProductData(row)\n                                    setStatusOfUser(row.status)\n                                  }} />\n                              </Tooltip>\n                            </TableCell>\n                          </TableRow>\n\n\n                        </>\n                      ))}</>}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item xs={12} md={12} align=\"right\">\n            {/* <Pagination count={productsLength}\n              onChange={(event, page) =>\n                handleChangePage(page)}\n              variant=\"outlined\" color=\"primary\" /> */}\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25]}\n              component=\"div\"\n              count={products.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n\n          </Grid>\n        </Grid>\n\n        {/* <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={productsLength}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      /> */}\n        <Menu\n          id=\"basic-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'basic-button',\n          }}\n          PaperProps={{\n            elevation: 0,\n            sx: {\n              overflow: 'visible',\n              boxShadow: '0px 2px 30px -15px rgba(94,94,107,0.67)',\n              mt: 1.5,\n\n            },\n          }}\n          transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n          anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n        >\n          <MenuItem onClick={() => navigate(`/user_detail/${selectedIndex}`)}>View User</MenuItem>\n          <MenuItem onClick={() => {\n            console.log(StatusOfUser)\n            setOpendel(true)\n            setAnchorEl(null);\n          }}>\n            {\n              StatusOfUser === \"active\" ? \"Block User\" : \"Unblock User\"\n            }\n          </MenuItem>\n\n          {/* <MenuItem onClick={() => {\n            setOpenEdit(true)\n            // setAnchorEl(null)\n            // setOpendel(true)\n            // setStatusData('resolved')\n\n            //  navigate(`/subscribed_product_detail/${selectedIndex}`)\n\n          }\n          }>Edit Product</MenuItem>\n          <MenuItem style={{ color: 'red' }} onClick={() => handleDelete()}>Delete </MenuItem> */}\n        </Menu>\n\n        {/* delete Dialog  */}\n        <Dialog\n          open={opendel}\n          onClose={handleClosedel}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle sx={{ m: 0, p: 2, fontSize: '20px', fontWeight: 700 }} id=\"customized-dialog-title\">\n            Update Status\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <DialogContentText id=\"alert-dialog-description\" style={{ fontSize: '15px', color: 'black' }}>\n                  Are you sure you want to  {\n                    StatusOfUser === \"active\" ? \"Block User\" : \"Unblock User\"\n                  }?\n                </DialogContentText>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12} align=\"right\">\n                <Button disableElevation onClick={handleClosedel} variant=\"outlined\" size=\"medium\" style={{ marginRight: '12px', fontWeight: 700, color: 'gray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"secondary\">\n                  No\n                </Button>\n                <Button disabled={loading} onClick={() => DeleteProduct()} disableElevation variant=\"contained\" size=\"medium\" style={{ fontWeight: 700, color: 'white', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"error\">\n                  Yes\n                </Button>\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </Dialog>\n        {/* Edit  */}\n        <BootstrapDialog\n          onClose={handleCloseEdit}\n          aria-labelledby=\"customized-dialog-title\"\n          open={openEdit}\n        >\n          <DialogTitle sx={{ m: 0, p: 2, fontSize: '25px', fontWeight: 700 }} id=\"customized-dialog-title\">\n            Edit Product\n          </DialogTitle>\n          <IconButton\n            aria-label=\"close\"\n            onClick={handleCloseEdit}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          >\n            <CloseOutlined />\n          </IconButton>\n          <DialogContent dividers>\n            <Formik\n              initialValues={{\n                name: productData ? productData.product_name : '',\n                description: productData ? productData.description : '',\n                product_id_stripe: productData ? productData.product_id_stripe : '',\n                submit: null\n              }}\n              validationSchema={Yup.object().shape({\n                name: Yup.string().required('Name is required'),\n                description: Yup.string().required('Description is required'),\n                product_id_stripe: Yup.string().required('Stripe Product is required')\n              })}\n              onSubmit={async (values, { setErrors, setStatus, setSubmitting, resetForm }) => {\n                try {\n                  console.log(values)\n                  console.log(ImageFile)\n                  let ImageUrl;\n                  if (ImageFile === null || ImageFile === \"\") {\n                    toastAlert(\"error\", \"Image Is Required\")\n                  } else {\n                    const postDataImage = {\n                      image: ImageFile\n                    };\n                    ImageUrl = await postFormData(postDataImage); // Specify the endpoint you want to call\n                    console.log(ImageUrl)\n                  }\n                  setSubmitting(true);\n                  const postData = {\n                    product_id: productData.product_id,\n                    image: ImageUrl?.path,\n                    product_name: values.name,\n                    description: values.description,\n                    product_id_stripe: values.product_id_stripe\n                  };\n                  try {\n                    const apiData = await post('product/updateProduct', postData); // Specify the endpoint you want to call\n                    console.log(apiData)\n                    if (apiData.error) {\n                      console.log(\"error true\")\n                      toastAlert(\"error\", apiData.message)\n                      setSubmitting(false);\n\n                    } else {\n                      // localStorage.setItem(\"@AdminSession\", JSON.stringify({ user: apiData.data }));\n                      // navigate('/')\n                      // setOpen(false)\n                      toastAlert(\"success\", apiData.message)\n                      setImageFile('')\n                      setSelectedImage('')\n                      resetForm();\n                      setTimeout(() => {\n                        window.location.reload();\n                      }, 1000);\n\n                      setStatus({ success: false });\n                      setSubmitting(false);\n                    }\n                  } catch (error) {\n                    toastAlert(\"error\", \"Something Went Wrong\")\n                    // setNextloader(false)\n                    setStatus({ success: false });\n                    setSubmitting(false);\n                    // console.error('Error fetching data:', error);\n                    // setNextloader(false)\n\n                  }\n                  setStatus({ success: false });\n                  setSubmitting(false);\n                } catch (err) {\n                  setStatus({ success: false });\n                  setErrors({ submit: err.message });\n                  setSubmitting(false);\n                }\n              }}\n            >\n              {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                <form noValidate onSubmit={handleSubmit}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h5\">Product Name</Typography>\n                        <OutlinedInput\n                          id=\"email-login\"\n                          type=\"text\"\n                          value={values.name}\n                          name=\"name\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          placeholder=\"Enter Product Name\"\n                          fullWidth\n                          error={Boolean(touched.name && errors.name)}\n                        />\n                        {touched.name && errors.name && (\n                          <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                            {errors.name}\n                          </FormHelperText>\n                        )}\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h5\">Description</Typography>\n\n                        <InputLabel htmlFor=\"email-login\">Appears at checkout, on the customer portal, and in quotes.</InputLabel>\n                        <OutlinedInput\n                          id=\"description\"\n                          type=\"text\"\n                          value={values.description}\n                          name=\"description\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          placeholder=\"Enter Product description\"\n                          fullWidth\n                          multiline\n                          rows={4}\n                          error={Boolean(touched.description && errors.description)}\n                        />\n                        {touched.description && errors.description && (\n                          <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                            {errors.description}\n                          </FormHelperText>\n                        )}\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h5\">Stripe Product Id</Typography>\n\n                        <InputLabel htmlFor=\"email-login\">This id should be get from stripe Products .</InputLabel>\n                        <Stack spacing={1} display=\"flex\" direction=\"row\">\n                          <OutlinedInput\n                            id=\"product_id_stripe\"\n                            type=\"text\"\n                            value={values.product_id_stripe}\n                            name=\"product_id_stripe\"\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            placeholder=\"Enter Stripe Product Id\"\n                            fullWidth\n\n                            error={Boolean(touched.product_id_stripe && errors.product_id_stripe)}\n                          />\n\n                          <Button disableElevation variant=\"outlined\" onClick={() => window.open('https://dashboard.stripe.com/', '_blank')} startIcon={<PaperClipOutlined />} size=\"medium\" style={{ color: 'rgb(76 91 104)', fontWeight: 700, backgroundColor: 'white', border: '1px solid lightGray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"secondary\">\n                            Stripe\n                          </Button>\n                        </Stack>\n                        {touched.product_id_stripe && errors.product_id_stripe && (\n                          <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                            {errors.product_id_stripe}\n                          </FormHelperText>\n                        )}\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h5\">Image</Typography>\n\n                        <InputLabel htmlFor=\"email-login\">Appears at checkout. JPEG or PNG image smaller than 2 MB.</InputLabel>\n                        {selectedImage === '' || selectedImage === null ? <>\n                          <AnimateButton>\n                            <Button onClick={handleButtonClick} disableElevation variant=\"outlined\" startIcon={<UploadOutlined />} size=\"medium\" style={{ color: 'rgb(76 91 104)', fontWeight: 700, backgroundColor: 'white', border: '1px solid lightGray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"secondary\">\n                              Upload\n                            </Button>\n                          </AnimateButton>\n                        </> :\n                          <>\n                            <AnimateButton>\n                              <Button onClick={() => setSelectedImage('')} disableElevation variant=\"outlined\" size=\"medium\" style={{ color: 'rgb(76 91 104)', fontWeight: 700, backgroundColor: 'white', border: '1px solid lightGray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"secondary\">\n                                Cancel\n                              </Button>\n                            </AnimateButton>\n                            {selectedImage &&\n                              <Avatar src={selectedImage} alt=\"Selected\" style={{ width: '300px', height: 'auto', border: '1px solid lightGray', borderRadius: '10px' }} variant=\"square\" />\n                            }\n                          </>}\n\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          style={{ display: 'none' }}\n                          id=\"fileInput\"\n                          onChange={handleFileUpload}\n                          ref={fileInputRef}\n                        />\n\n\n                      </Stack>\n                    </Grid>\n\n                    {errors.submit && (\n                      <Grid item xs={12}>\n                        <FormHelperText error>{errors.submit}</FormHelperText>\n                      </Grid>\n\n                    )}\n                    <Grid item xs={12} >\n                      <Divider />\n                    </Grid>\n                    <Grid item xs={12} align=\"right\">\n\n                      <Button disabled={isSubmitting}\n                        startIcon={isSubmitting ? <ClipLoader color=\"white\" loading={isSubmitting} size={20} />\n                          : null\n                        }\n                        type=\"submit\"\n                        disableElevation variant=\"contained\"\n                        size=\"medium\" style={{ fontWeight: 700, color: 'white', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"primary\">\n                        Update\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            </Formik>\n          </DialogContent>\n\n\n        </BootstrapDialog>\n      </>}\n    </Box>\n  );\n}\n","// material-ui\nimport {\n  Typography, Grid, Button, Box, IconButton,\n} from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\n// project import\nimport OrdersTable from './OrdersTable';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport {\n  PlusOutlined,\n} from '@ant-design/icons';\nimport toastAlert from 'components/ToastAlert/index';\nimport { useNavigate } from 'react-router-dom';\nimport { post, postFormData } from 'Urls/api';\n\n\n\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n// ==============================|| SAMPLE PAGE ||============================== //\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { styled } from '@mui/material/styles';\nimport ExportCSV from 'utils/ExportCSV';\nimport AnalyticEcommerce from 'components/cards/statistics/AnalyticEcommerce';\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst Users = () => {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  //  Select Image \n  const fileInputRef = useRef(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [ImageFile, setImageFile] = useState(null);\n\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImageFile(file)\n      const reader = new FileReader();\n      reader.onload = () => {\n        setSelectedImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleButtonClick = () => {\n    fileInputRef.current.click();\n  };\n  const navigate = useNavigate();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [products, setProducts] = useState([]);\n\n  const [total_users, setTotal_Users] = useState(0)\n  const [total_subscriptions, setTotal_Subscriptions] = useState(0)\n  const [monthly_subscriptions, setMonthly_Subscriptions] = useState(0)\n  const [yearly_subscriptions, setYearly_Subscriptions] = useState(0)\n\n  const [total_products, setTotal_Products] = useState(0)\n  const [total_open_tickets, setTotal_Open_tickets] = useState(0)\n\n  const fetchAllproducts = async () => {\n    try {\n\n      const apiData = await post('user/dashboardAdminCount'); // Specify the endpoint you want to call\n      console.log(\"ALL Dashboard Count\")\n\n      console.log(apiData)\n\n      if (apiData.error) {\n\n\n        // toastAlert(\"error\", apiData.message)\n\n\n        // setNextloader(false)\n      } else {\n        setTotal_Users(apiData.total_users)\n        setTotal_Subscriptions(apiData.total_active_users)\n        setTotal_Products(apiData.total_block_users)\n        // setTotal_Open_tickets(apiData.monthly_subscription)\n        // setMonthly_Subscriptions(apiData.monthly_subscription)\n        // setYearly_Subscriptions(apiData.yearly_subscription)\n\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n\n    }\n  }\n  useEffect(() => {\n    fetchAllproducts()\n  }, []);\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={9} style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h3\" style={{ fontWeight: 700 }}>Users</Typography>\n\n        </Grid>\n        <Grid item xs={12} md={3} style={{ display: 'flex', justifyContent: 'right' }}>\n\n\n          {/* <AnimateButton>\n              <Button disableElevation variant=\"outlined\" startIcon={<ExportOutlined />} size=\"medium\" style={{ marginLeft: '20px', color: 'rgb(76 91 104)', fontWeight: 700, backgroundColor: 'white', border: '1px solid lightGray', boxShadow: ' 0px 2px 30px -15px rgba(94,94,107,0.67)' }} color=\"secondary\">\n              <ExportCSV data={\n                  products.map((item) => {\n                    return {\n                      \"Product Name\": item?.product_name,\n                      \"Price\": item?.price,\n                      \"Description\": item?.description,\n                      \"Created At\": item?.created_at,\n                      \"Stripe Id\": item?.product_id_stripe,\n                    }\n                  })\n                } FileName=\"Subscribed Products\" />\n              </Button>\n            </AnimateButton> */}\n\n          <AnimateButton>\n            <Button\n              onClick={() => navigate('/userAdd')}\n              disableElevation startIcon={<PlusOutlined />} size=\"medium\" color=\"primary\" variant=\"contained\">\n              User\n            </Button>\n          </AnimateButton>\n        </Grid>\n        <Grid item xs={12} md={12}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6} md={4} lg={4}>\n              <AnalyticEcommerce title=\"Total Users\" count={total_users} />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4} lg={4}>\n              <AnalyticEcommerce title=\"Total Active Users\" count={total_subscriptions} />\n            </Grid>\n            <Grid item xs={12} sm={6} md={4} lg={4}>\n              <AnalyticEcommerce title=\"Total Blocked Users\" count={total_products} />\n            </Grid>\n\n          </Grid>\n          </Grid>\n\n        <Grid item xs={12} md={12}>\n          <OrdersTable />\n        </Grid>\n      \n      </Grid>\n\n    </>\n  )\n};\n\nexport default Users;\n"],"names":["AnalyticEcommerce","_ref","color","title","count","percentage","isLoss","extra","_jsx","MainCard","contentSX","p","children","_jsxs","Stack","spacing","Typography","variant","Grid","container","alignItems","item","Chip","label","concat","sx","ml","pl","size","defaultProps","BootstrapDialog","styled","Dialog","theme","padding","OrderTable","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","products","setProducts","_useState3","_useState4","setProductsLength","anchorRef","useRef","_useState5","_useState6","anchorEl","setAnchorEl","open","Boolean","_useState7","_useState8","opendel","setOpendel","handleClosedel","_useState9","_useState10","selectedIndex","setSelectedIndex","_useState11","_useState12","loading","setLoading","DeleteProduct","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","postData","apiData","wrap","_context","prev","next","console","log","user_id","status","StatusOfUser","post","sent","error","toastAlert","message","fetchAllproducts","stop","apply","arguments","_useState13","_useState14","page","setPage","_useState15","_useState16","rowsPerPage","setRowsPerPage","_useState17","_useState18","loader","setLoader","_ref3","_callee2","_context2","totalPages","result","t0","_useState19","_useState20","productData","setProductData","fileInputRef","_useState21","_useState22","selectedImage","setSelectedImage","_useState23","_useState24","ImageFile","setImageFile","_useState25","_useState26","openEdit","setOpenEdit","handleCloseEdit","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsDataURL","_useState27","_useState28","setStatusOfUser","handleButtonClick","current","click","useEffect","Box","_Fragment","pt","xs","md","Skeleton","height","align","TableContainer","width","overflowX","position","display","maxWidth","whiteSpace","Table","pr","TableHead","TableRow","TableCell","TableBody","length","colSpan","style","justifyContent","Avatar","src","emptyImage","alt","marginBlock","slice","map","row","border","component","scope","cursor","onClick","backgroundColor","textTransform","user_name","charAt","fontWeight","email","subscribedProducts","Badge","badgeContent","formatDate","created_at","updated_at","Tooltip","EllipsisOutlined","ref","fontSize","currentTarget","product_id","TablePagination","rowsPerPageOptions","onPageChange","newPage","onRowsPerPageChange","parseInt","value","Menu","id","onClose","MenuListProps","PaperProps","elevation","overflow","boxShadow","mt","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","DialogTitle","m","DialogContent","Divider","DialogContentText","Button","disableElevation","marginRight","disabled","IconButton","right","top","palette","grey","CloseOutlined","dividers","Formik","initialValues","name","product_name","description","product_id_stripe","submit","validationSchema","Yup","shape","required","onSubmit","_ref5","_callee3","values","_ref4","setErrors","setStatus","setSubmitting","resetForm","_ImageUrl","ImageUrl","postDataImage","_context3","image","postFormData","path","setTimeout","window","location","reload","success","t1","_x","_x2","_ref6","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","OutlinedInput","type","onBlur","onChange","placeholder","fullWidth","FormHelperText","InputLabel","htmlFor","multiline","rows","direction","startIcon","PaperClipOutlined","AnimateButton","UploadOutlined","borderRadius","accept","ClipLoader","total_users","setTotal_Users","total_subscriptions","setTotal_Subscriptions","total_products","setTotal_Products","total_active_users","total_block_users","PlusOutlined","sm","lg","OrdersTable"],"sourceRoot":""}